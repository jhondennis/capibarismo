---
import { getLangFromUrl } from '@/i18n'

const lang = getLangFromUrl(Astro.url)

const currentPath = Astro.url.pathname
const spanishPath = currentPath.replace(/^\/en/, '') || '/'
const englishPath = currentPath.startsWith('/en') ? currentPath : `/en${currentPath}`
---

<div class="group relative" id="language-selector">
  <button
    class="hover:bg-warm-200 dark:hover:bg-warm-800 flex items-center gap-2 rounded-full p-2 transition-colors"
  >
    <span>{lang === 'en' ? 'ğŸ‡ºğŸ‡¸' : 'ğŸ‡ªğŸ‡¸'}</span>
    <!-- <span class="hidden sm:inline">{lang === 'en' ? 'English' : 'EspaÃ±ol'}</span> -->
    <span class="sr-only md:not-sr-only">{lang === 'en' ? 'English' : 'EspaÃ±ol'}</span>

    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="h-4 w-4"
    >
      <polyline points="6 9 12 15 18 9"></polyline>
    </svg>
  </button>

  <div
    id="language-dropdown"
    class="dark:bg-warm-900 border-warm-200 dark:border-warm-800 absolute right-0 z-50 mt-2 hidden w-40 rounded-lg border bg-white shadow-lg group-hover:block"
  >
    <div class="p-2" role="menu" aria-orientation="vertical">
      <a
        href={englishPath}
        class={`flex items-center gap-2 rounded-md px-3 py-2 ${lang === 'en' ? 'bg-warm-100 dark:bg-warm-800' : 'hover:bg-warm-100 dark:hover:bg-warm-800'} transition-colors`}
        role="menuitem"
      >
        ğŸ‡ºğŸ‡¸ English
      </a>
      <a
        href={spanishPath}
        class={`flex items-center gap-2 rounded-md px-3 py-2 ${lang === 'es' ? 'bg-warm-100 dark:bg-warm-800' : 'hover:bg-warm-100 dark:hover:bg-warm-800'} transition-colors`}
        role="menuitem"
      >
        ğŸ‡ªğŸ‡¸ EspaÃ±ol
      </a>
    </div>
  </div>
</div>

<script>
  // document.addEventListener('DOMContentLoaded', () => {
  //   const toggle = document.getElementById('language-selector')
  //   const dropdown = document.getElementById('language-dropdown')

  //   if (toggle && dropdown) {
  //     toggle.addEventListener('click', (e) => {
  //       e.stopPropagation()
  //       dropdown.classList.toggle('hidden')
  //     })

  //     document.addEventListener('click', (e) => {
  //       if (!dropdown.contains(e.target as Node) && !toggle.contains(e.target as Node)) {
  //         dropdown.classList.add('hidden')
  //       }
  //     })
  //   }
  // })

  const languageSelector = document.getElementById('language-selector')
  const languageDropdown = document.getElementById('language-dropdown')

  if (languageSelector && languageDropdown) {
    languageSelector.addEventListener('click', (e) => {
      e.stopPropagation()
      languageDropdown.classList.toggle('hidden')
    })
    document.addEventListener('click', (e) => {
      if (!languageSelector.contains(e.target as Node)) {
        languageDropdown.classList.add('hidden')
      }
    })
  }
</script>
